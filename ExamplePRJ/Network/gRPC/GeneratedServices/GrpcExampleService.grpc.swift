//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: grpcExampleService.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `GrpcExampleServiceClient`, then call methods of this protocol to make API calls.
internal protocol GrpcExampleServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: GrpcExampleServiceClientInterceptorFactoryProtocol? { get }

  func addClient(
    _ request: ClientsInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ClientsInfoRequest, AddClientReply>

  func getClients(
    _ request: EmptyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<EmptyRequest, GetClientsReply>

  func getClientByLogin(
    _ request: GetClientByLoginRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<GetClientByLoginRequest, GetClientsReply>
}

extension GrpcExampleServiceClientProtocol {
  internal var serviceName: String {
    return "GrpcExampleService"
  }

  /// Unary call to AddClient
  ///
  /// - Parameters:
  ///   - request: Request to send to AddClient.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addClient(
    _ request: ClientsInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ClientsInfoRequest, AddClientReply> {
    return self.makeUnaryCall(
      path: GrpcExampleServiceClientMetadata.Methods.addClient.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddClientInterceptors() ?? []
    )
  }

  /// Unary call to GetClients
  ///
  /// - Parameters:
  ///   - request: Request to send to GetClients.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getClients(
    _ request: EmptyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EmptyRequest, GetClientsReply> {
    return self.makeUnaryCall(
      path: GrpcExampleServiceClientMetadata.Methods.getClients.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetClientsInterceptors() ?? []
    )
  }

  /// Unary call to GetClientByLogin
  ///
  /// - Parameters:
  ///   - request: Request to send to GetClientByLogin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getClientByLogin(
    _ request: GetClientByLoginRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GetClientByLoginRequest, GetClientsReply> {
    return self.makeUnaryCall(
      path: GrpcExampleServiceClientMetadata.Methods.getClientByLogin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetClientByLoginInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension GrpcExampleServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "GrpcExampleServiceNIOClient")
internal final class GrpcExampleServiceClient: GrpcExampleServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: GrpcExampleServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: GrpcExampleServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the GrpcExampleService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GrpcExampleServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct GrpcExampleServiceNIOClient: GrpcExampleServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: GrpcExampleServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the GrpcExampleService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GrpcExampleServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol GrpcExampleServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: GrpcExampleServiceClientInterceptorFactoryProtocol? { get }

  func makeAddClientCall(
    _ request: ClientsInfoRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ClientsInfoRequest, AddClientReply>

  func makeGetClientsCall(
    _ request: EmptyRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EmptyRequest, GetClientsReply>

  func makeGetClientByLoginCall(
    _ request: GetClientByLoginRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GetClientByLoginRequest, GetClientsReply>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GrpcExampleServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return GrpcExampleServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: GrpcExampleServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAddClientCall(
    _ request: ClientsInfoRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ClientsInfoRequest, AddClientReply> {
    return self.makeAsyncUnaryCall(
      path: GrpcExampleServiceClientMetadata.Methods.addClient.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddClientInterceptors() ?? []
    )
  }

  internal func makeGetClientsCall(
    _ request: EmptyRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EmptyRequest, GetClientsReply> {
    return self.makeAsyncUnaryCall(
      path: GrpcExampleServiceClientMetadata.Methods.getClients.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetClientsInterceptors() ?? []
    )
  }

  internal func makeGetClientByLoginCall(
    _ request: GetClientByLoginRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GetClientByLoginRequest, GetClientsReply> {
    return self.makeAsyncUnaryCall(
      path: GrpcExampleServiceClientMetadata.Methods.getClientByLogin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetClientByLoginInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GrpcExampleServiceAsyncClientProtocol {
  internal func addClient(
    _ request: ClientsInfoRequest,
    callOptions: CallOptions? = nil
  ) async throws -> AddClientReply {
    return try await self.performAsyncUnaryCall(
      path: GrpcExampleServiceClientMetadata.Methods.addClient.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddClientInterceptors() ?? []
    )
  }

  internal func getClients(
    _ request: EmptyRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GetClientsReply {
    return try await self.performAsyncUnaryCall(
      path: GrpcExampleServiceClientMetadata.Methods.getClients.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetClientsInterceptors() ?? []
    )
  }

  internal func getClientByLogin(
    _ request: GetClientByLoginRequest,
    callOptions: CallOptions? = nil
  ) async throws -> GetClientsReply {
    return try await self.performAsyncUnaryCall(
      path: GrpcExampleServiceClientMetadata.Methods.getClientByLogin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetClientByLoginInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct GrpcExampleServiceAsyncClient: GrpcExampleServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: GrpcExampleServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GrpcExampleServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol GrpcExampleServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'addClient'.
  func makeAddClientInterceptors() -> [ClientInterceptor<ClientsInfoRequest, AddClientReply>]

  /// - Returns: Interceptors to use when invoking 'getClients'.
  func makeGetClientsInterceptors() -> [ClientInterceptor<EmptyRequest, GetClientsReply>]

  /// - Returns: Interceptors to use when invoking 'getClientByLogin'.
  func makeGetClientByLoginInterceptors() -> [ClientInterceptor<GetClientByLoginRequest, GetClientsReply>]
}

internal enum GrpcExampleServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "GrpcExampleService",
    fullName: "GrpcExampleService",
    methods: [
      GrpcExampleServiceClientMetadata.Methods.addClient,
      GrpcExampleServiceClientMetadata.Methods.getClients,
      GrpcExampleServiceClientMetadata.Methods.getClientByLogin,
    ]
  )

  internal enum Methods {
    internal static let addClient = GRPCMethodDescriptor(
      name: "AddClient",
      path: "/GrpcExampleService/AddClient",
      type: GRPCCallType.unary
    )

    internal static let getClients = GRPCMethodDescriptor(
      name: "GetClients",
      path: "/GrpcExampleService/GetClients",
      type: GRPCCallType.unary
    )

    internal static let getClientByLogin = GRPCMethodDescriptor(
      name: "GetClientByLogin",
      path: "/GrpcExampleService/GetClientByLogin",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol GrpcExampleServiceProvider: CallHandlerProvider {
  var interceptors: GrpcExampleServiceServerInterceptorFactoryProtocol? { get }

  func addClient(request: ClientsInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<AddClientReply>

  func getClients(request: EmptyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetClientsReply>

  func getClientByLogin(request: GetClientByLoginRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetClientsReply>
}

extension GrpcExampleServiceProvider {
  internal var serviceName: Substring {
    return GrpcExampleServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddClient":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ClientsInfoRequest>(),
        responseSerializer: ProtobufSerializer<AddClientReply>(),
        interceptors: self.interceptors?.makeAddClientInterceptors() ?? [],
        userFunction: self.addClient(request:context:)
      )

    case "GetClients":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EmptyRequest>(),
        responseSerializer: ProtobufSerializer<GetClientsReply>(),
        interceptors: self.interceptors?.makeGetClientsInterceptors() ?? [],
        userFunction: self.getClients(request:context:)
      )

    case "GetClientByLogin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetClientByLoginRequest>(),
        responseSerializer: ProtobufSerializer<GetClientsReply>(),
        interceptors: self.interceptors?.makeGetClientByLoginInterceptors() ?? [],
        userFunction: self.getClientByLogin(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol GrpcExampleServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: GrpcExampleServiceServerInterceptorFactoryProtocol? { get }

  func addClient(
    request: ClientsInfoRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> AddClientReply

  func getClients(
    request: EmptyRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> GetClientsReply

  func getClientByLogin(
    request: GetClientByLoginRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> GetClientsReply
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GrpcExampleServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return GrpcExampleServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return GrpcExampleServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: GrpcExampleServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddClient":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ClientsInfoRequest>(),
        responseSerializer: ProtobufSerializer<AddClientReply>(),
        interceptors: self.interceptors?.makeAddClientInterceptors() ?? [],
        wrapping: { try await self.addClient(request: $0, context: $1) }
      )

    case "GetClients":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EmptyRequest>(),
        responseSerializer: ProtobufSerializer<GetClientsReply>(),
        interceptors: self.interceptors?.makeGetClientsInterceptors() ?? [],
        wrapping: { try await self.getClients(request: $0, context: $1) }
      )

    case "GetClientByLogin":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GetClientByLoginRequest>(),
        responseSerializer: ProtobufSerializer<GetClientsReply>(),
        interceptors: self.interceptors?.makeGetClientByLoginInterceptors() ?? [],
        wrapping: { try await self.getClientByLogin(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol GrpcExampleServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'addClient'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddClientInterceptors() -> [ServerInterceptor<ClientsInfoRequest, AddClientReply>]

  /// - Returns: Interceptors to use when handling 'getClients'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetClientsInterceptors() -> [ServerInterceptor<EmptyRequest, GetClientsReply>]

  /// - Returns: Interceptors to use when handling 'getClientByLogin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetClientByLoginInterceptors() -> [ServerInterceptor<GetClientByLoginRequest, GetClientsReply>]
}

internal enum GrpcExampleServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "GrpcExampleService",
    fullName: "GrpcExampleService",
    methods: [
      GrpcExampleServiceServerMetadata.Methods.addClient,
      GrpcExampleServiceServerMetadata.Methods.getClients,
      GrpcExampleServiceServerMetadata.Methods.getClientByLogin,
    ]
  )

  internal enum Methods {
    internal static let addClient = GRPCMethodDescriptor(
      name: "AddClient",
      path: "/GrpcExampleService/AddClient",
      type: GRPCCallType.unary
    )

    internal static let getClients = GRPCMethodDescriptor(
      name: "GetClients",
      path: "/GrpcExampleService/GetClients",
      type: GRPCCallType.unary
    )

    internal static let getClientByLogin = GRPCMethodDescriptor(
      name: "GetClientByLogin",
      path: "/GrpcExampleService/GetClientByLogin",
      type: GRPCCallType.unary
    )
  }
}
